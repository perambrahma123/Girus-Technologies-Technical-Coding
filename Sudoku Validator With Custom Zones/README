Problem Statement
You are given a 9×9 Sudoku board. Your task is to validate whether the board satisfies all the standard Sudoku rules and also additional custom zone constraints.

Standard Sudoku Rules:
Each row must contain the digits 1 through 9 exactly once.

Each column must contain the digits 1 through 9 exactly once.

Each of the nine 3×3 sub-boxes of the grid must also contain the digits 1 through 9 exactly once.

Additional Rule - Custom Zones:
You are given a set of custom zones.

Each custom zone consists of 9 distinct cells (defined by their row and column indices).

Each custom zone must also contain the digits 1 through 9 exactly once.

Input Format
The program expects the following input from the user via the console:

1. Sudoku Board
9 lines of input.

Each line contains 9 space-separated integers, each from 1 to 9.

These lines represent the rows of the Sudoku board.

Example:
5 3 4 6 7 8 9 1 2
6 7 2 1 9 5 3 4 8
1 9 8 3 4 2 5 6 7
8 5 9 7 6 1 4 2 3
4 2 6 8 5 3 7 9 1
7 1 3 9 2 4 8 5 6
9 6 1 5 3 7 2 8 4
2 8 7 4 1 9 6 3 5
3 4 5 2 8 6 1 7 9 
2. Number of Custom Zones
A single integer input indicating how many custom zones will be provided.

3. Custom Zone Coordinates
For each custom zone:

A single line with 9 space-separated cell coordinates.

Each coordinate is in the form row,col, where both row and col range from 0 to 8.

The user must ensure each zone has 9 unique positions.

Example:

Copy
Edit
0,0 1,1 2,2 3,3 4,4 5,5 6,6 7,7 8,8
Output Format
The program prints:

Valid Sudoku if the board satisfies all standard and custom constraints.

Invalid Sudoku if any of the checks fail.

Explanation of the Validation Process
Step 1: Input Handling
The program reads the 9x9 Sudoku board and stores it in a 2D array.

It then reads the number of custom zones.

For each custom zone, it reads and stores the 9 coordinates as a list of row-column pairs.

Step 2: Validation
The board is validated using four main checks:

1. Row Validation
For each row:

Use a boolean array to track which digits (1–9) have been seen.

If any digit repeats or is out of range, the board is invalid.

2. Column Validation
For each column:

Use the same method as rows, scanning down each column.

3. Box Validation
Divide the board into nine 3×3 boxes.

Each box is validated similarly by checking that all values are 1–9 and unique.

4. Custom Zone Validation
For each custom zone:

Access the 9 specified coordinates in the board.

Ensure all values are between 1 and 9, and that none are repeated.

Step 3: Final Output
If all four types of validations pass, the board is considered valid.

If any single check fails, the board is invalid.
